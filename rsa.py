# -*- coding: utf-8 -*-
"""RSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__08nZoLlmKMOLiknSFWSnEV1MQnCkqh
"""

def gcd(a,b):
  while b != 0:
        c = a % b
        a = b
        b = c
  return a


def egcd(a,b):
  if a == 0:
    return b, 0, 1
  else:
        g, y, x = egcd(b % a, a)
        return g, x - (b // a) * y, y

def modinv(a,m):
  g, x, y = egcd(a, m)
  if g != 1:
    raise Exception('modular inverse does not exist')
  else:
    return x % m

def encrypt(m):
  c = m**e
  c = c%n
  return c

def decrypt(c):
  m = c**d
  m = m%n
  return m

p = int(input("Enter a prime number(p) "))
q = int(input("Enter another prime(q) "))
print("Choosen primes are",p,q)
n = p*q
phi_n = (p-1)*(q-1)
gcd_list = []
for i in range(phi_n):
  if(gcd(i,phi_n)==1):
    gcd_list.append(i)
print(gcd_list)
e = int(input("Choose a number from above printed list "))
d = modinv(e,phi_n)
print("Public key is",(n,e))
print("Private key is",(n,d))

m = int(input("Enter the number "))
en = encrypt(m)
print("Encypted form",en)
de = decrypt(en)
print("Decrypted form",de)

()